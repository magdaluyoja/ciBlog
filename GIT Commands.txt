1. git init - Initialize empty Git repository

2. git status -  command to see what the current state of our project

3. git add - add it to the staging area by using 

4. git commit -m "Add cute octocat story" - To store our staged changes we run the commit command with a message describing what we've changed

5. git log - a journal that remembers all the changes we've committed so far, in the order we committed them.

6. git remote add [origin(eg. origin)][repository URL] - To push our local repo to the GitHub server we'll need to add a remote repository

7. git push -u origin master - The push command tells Git where to put our commits when we're ready, and now we're ready. So let's push our local changes to our origin repo (on GitHub).
The name of our remote is origin and the default local branch name is master. The -u tells Git to remember the parameters, so that next time we can simply run git push and Git will know what to do

8. git pull origin master - Let's pretend some time has passed. We've invited other people to our GitHub project who have pulled your changes, made their own commits, and pushed them.
We can check for changes on our GitHub repository and pull down any new changes	

9. git diff HEAD - Uh oh, looks like there have been some additions and changes to the octocat family. Let's take a look at what is different from our last commit by using the git diff command.

10. git diff --staged - In this case we want the diff of our most recent commit, which we can refer to using the HEAD pointer.
Good, now go ahead and run git diff with the --staged option to see the changes you just staged. You should see that  octodog.txt was created.

11. git reset octofamily/octodog.txt - So now that octodog is part of the family, octocat is all depressed. Since we love octocat more than octodog, we'll turn his frown around by removing octodog.txt.
You can unstage files by using the git reset command. Go ahead and remove octofamily/octodog.txt.

12. git checkout -- octocat.txt - git reset did a great job of unstaging octodog.txt, but you'll notice that he's still there. He's just not staged anymore. It would be great if we could go back to how things were before octodog came around and ruined the party.
Files can be changed back to how they were at the last commit by using the command: git checkout -- <target>. Go ahead and get rid of all the changes since the last commit for octocat.txt

BRANCHING 

13. git branch clean_up - creates a branch clean_up

14. git checkout clean_up - You can switch branches using the git checkout <branch> command.Great! Now if you type git branch you'll see two local branches: a main branch named master and your new branch named  clean_up.

15. git checkout -b new_branch - do 13 and 14

16. git rm '*.txt' - Ok, so you're in the clean_up branch. You can finally remove all those pesky octocats by using the git rm command which will not only remove the actual files from disk, but will also stage the removal of the files for us.

17. git commit -m "Remove all the cats" - Now that you've removed all the cats you'll need to commit your changes

18. git checkout master - Great, you're almost finished with the cat... er the bug fix, you just need to switch back to the master branch so you can copy (or merge) your changes from the clean_up branch back into the master branch.

19. git merge clean_up - We're already on the master branch, so we just need to tell Git to merge the clean_up branch into it:

20. git branch -d clean_up - You can use git branch -d <branch name> to delete a branch. Go ahead and delete the clean_up branch now. You'll notice that git branch -d bad_feature doesn't work. This is because -d won't let you delete something that hasn't been merged.
You can either add the --force (-f) option or use -D which combines -d -f together into one command.

21. git push - push all the changes

22. git push -u origin <branch> - pushing to remote branch

23. git checkout --track -b origin/daves_branch - pulling remote branch

git remote show [remote] - list remote branches


Creating branch from local then push

1. git checkout -b [branchname]
2. git add .
3. git status
4. git commit -m "Message"
5. git push [repository name] [branch name]

Pull repository from specific branch
1. git pull [repository name] [branch name]